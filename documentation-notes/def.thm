Kind lftm type.
Kind lftp type.
Kind lfkind type.

Type lflam lftp -> (lftm -> lftm) -> lftm.
Type lfapp lftm -> lftm -> lftm.
Type lfpi lftp -> (lftm -> lftp) -> lftp.
Type lfapptp lftp -> lftm -> lftp.

Type oftp lftm -> lftp -> o.
Type ofkind lftp -> lfkind -> o.

Define hastype : olist -> lftm -> lftp -> prop by
  hastype G X A := member (oftp X A) G
; hastype G (lfapp M N) A := exists A1 A2, (hastype G M (lfpi A1 A2) /\ hastype G N A1 /\ (A2 N) = A)
; hastype G (lflam A M) (lfpi A B) := nabla x, hastype (oftp x A :: G) (M x) (B x).


Type nat lftp.
Type z lftm.
Type s lftm -> lftm.

Theorem test1 : nabla x, forall A, hastype (of x A :: nil) x A.
intros. unfold. unfold. search.

Theorem test2 : nabla s z n, hastype (of s (lfpi n (y\ n) (of z n :: nil))) s (lfpi n (y\ n)).

Theorem test : nabla n z s, forall N, hastype (of s (lfpi n (y\ n)), of z n) N n -> hastype (of s (lfpi n (y\ n)), of z n) (s N) n.