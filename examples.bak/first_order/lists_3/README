An encoding of lists of natural numbers, along with the append relation, a naive
append based reverse relation (rev_app), and an accumulator-list based reverse
relation (rev_acc).  Proves associativity of append, along with a proof that the
reverse of the reverse of a list is the original list using both versions of
reverse.

app_assoc
---------
Proves that append is left associative: if A @ (B @ C) = ABC, then (A @ B) @ C =
ABC. More specifically, proves that, if B @ C = BC and A @ BC = ABC, there
exists an AB such that A @ B = AB and AB @ C = ABC.

This is proven by induction on how the second formula was proven. If it was
proven using append_cons, then we can apply the inductive hypothesis to get
formulas that can directly prove the theorem using append_cons. In the nil case,
we can simply use append_nil and the first hypothesis.

app_identity
------------
Proves that, if nil is appended to a list, the result must be equal to that
list.

rev_app_swap
------------
Proves that, if A @ B = AB and b @ a = ba, and A and a are reverses and B and b
are reverses, AB and ba are reverses. This proves that the append of two
reversed lists is the reverse of two appended lists.

rev_app_rev
-----------
Proves that the reverse of the reverse of a list is the original list using the
naive append based reverse.

rev_acc_func
------------
Proves that rev_acc is a function: if the first two inputs are the same, the
third will always be the same list.

rev_acc_exists
--------------
Proves that a suitable reversed list always exists for any two lists.

rev_acc_rev_lem
---------------
A lemma to prove rev_acc_rev.

rev_acc_rev
-----------
Proves that the reverse of the reverse of a list is the original list using
reverse defined by accumulator lists.
