Typing rules for the STLC:

x:t ∈ Γ
======= var
Γ ⊢ x:t

Γ, x:t1 ⊢ m:t2
============== abs
Γ ⊢ λx:t1.m : t1→t2

Γ⊢m:t1→t2   Γ⊢n:t1
=================== app
Γ ⊢ m n:t2

Weak large step call by name reduction rules for the STLC:


=============== r-abs
λx:t.m → λx:t.m

m → λx:t.r   [x→n]r → v
======================= β
m n → v

Subject Reduction: forall contexts Γ, terms m1 and m2 and type t,

Γ⊢m1:t ==> m1→m2 ==> Γ⊢m2:t

Proof:

We will prove this by induction on the height of the derivation tree for
reduction. Proceed by cases on the final reduction rule used.

r-abs case:
  m1 = λx:t2.m3
  m2 = λx:t2.m3

Since m1 and m2 are equal, our assumption of Γ⊢λx:t2.m3 is in fact exactly what
must be proven.

β case:
  m1 = m3 m4
  we know m3 → λx:t2.r
  we know [x→m4]r → m2

Since m1 is an application, it must have been proven using the app rule, so we
know Γ⊢m3:t3→t and Γ⊢m4:t3. Using the inductive hypothesis on Γ⊢m3:t3→t and
(m3→λx:t2.r) we get Γ⊢λx:t2.r:t3→t, which also means t2=t3. λx:t2.r is an
abstraction, so its typing judgement must have been proven using the abs rule,
so we know Γ,x:t2⊢r:t. Instantiating this with m4 gives us Γ⊢[x→m4]r:t. Using
the inductive hypothesis with Γ⊢[x→m4]r:t and [x→m4]r→m2 gives us Γ⊢m2:t which
is exactly what must be proven.


