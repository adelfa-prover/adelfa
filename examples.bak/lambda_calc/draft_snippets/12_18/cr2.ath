Specification "stlc.elf".

Schema c :=
 {T}(x:tm,y:of x T).

Theorem subject_reduction : ctx Gamma:c, forall M1 M2 T D1 D2,
  {Gamma |- D1 : step M1 M2} => {Gamma |- D2 : of M1 T} => exists D3,
  {Gamma |- D3 : of M2 T}.

  induction on 1. intros. case H1.

  % step-lam case
  case H2.
  apply IH to H6 H10.
  prune H11.
  exists of_lam R2 T1 T2 ([x] [x1] D1 x1 x).
  search.

  % step-beta case
  case H2.
  case H10.
  inst H15 with n2 = N.
  inst H16 with n3 = D5.
  exists D6 N D5.
  search.

  % step-app2 case
  case H2.
  apply IH to H6 H12.
  exists of_app M N2 T U a1 D3.
  search.

  % step-app1 case
  case H2.
  apply IH to H6 H11.
  exists of_app M4 N T U D3 a2.
  search.

Theorem cr2: ctx Gamma:c, forall M1 M2 T D1 D2,
  {T:ty} => {Gamma |- D1 : reduce M1 T} => {Gamma |- D2 : step M1 M2} => exists D3,
  {Gamma |- D3 : reduce M2 T}.

  induction on 1. intros. case H2.

  % reduce-arrow case.
  assert {Gamma |- M2 : tm}.
  case H3. search. inst H10 with n2 = M5. search. search. search.

  assert exists D5, {Gamma, n:tm, n1:reduce n T1 |- D5 : step (app M1 n) (app M2 n)}.
    exists step-app1 M1 M2 n D2.
    weaken H6 with tm.
    weaken H4 with tm.
    weaken H10 with reduce n2 T1.

    weaken H9 with tm.
    weaken H13 with reduce n5 T1.

    weaken H3 with tm.
    weaken H15 with (reduce n7 T1).

    search.
  case H1.
  apply IH to H12 H8 H10.
  apply subject_reduction to H3 H7.
  prune H14.
  exists reduce-abs T1 T2 M2 D6 ([x] [x1] D1 x1 x).
  search.

  % reduce-top case.
  case H6.
    % sn-norm case. I haven't worked this case out, skip.
    skip.

    % sn-step case.
    assert {Gamma |- M2 : tm}. case H3.
      search. inst H10 with n2 = M5. search. search. search.
    inst H8 with n = M2.
    inst H10 with n1 = D2.
    apply subject_reduction to H3 H5.
    prune H12.
    exists reduce-top M2 D1 (D M2 D2).
    search.
