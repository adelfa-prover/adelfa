The rules for typing, stepping, strong normalization and reducability are all as
they have appeared before.

A term is neutral if it is not a lambda expression.

We wish to prove the following two theorems:

Theorem CR1: forall terms m and types T, if m ∈ RED(T) then m is strongly
normalizing.

Theorem CR3: forall terms m and types T, if m is neutral and if, forall terms
m', m ~> m' implies m' ∈ RED(T), then m ∈ RED(T).

Proof:

We will prove this by mutual induction on the structure of the type T for both
theorems. Proceed by cases on the structure of type T for both theorems.

Theorem CR1 top case:
  T = top

In this case, we know m ∈ RED(top) must have been proven using reduce-top, which
means m must be strongly normalizing.

Theorem CR1 arrow case:
  T = T1 -> T2

In this case, we know m ∈ RED(T1 -> T2) must have been proven using reduce-arr,
which means we know m has type T1 -> T2 and, for any term n such that n ∈
RED(T1), (m n) ∈ RED(T2). Let x be a variable of type T1. As a variable, x is
neutral. x also does not step to any other term, so we know by the inductive
hypothesis for CR3 that x ∈ RED(T1). Therefore we know (m x) ∈ RED(T2). By the
inductive hypothesis for CR1, we then know that (m x) is strongly normalizing.
There is a lemma (which we have not yet proven) stating that if an application
is strongly normalizing, then both terms of the application are strongly
normalizing. Therefore m is strongly normalizing.
