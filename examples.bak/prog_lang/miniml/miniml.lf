ty : type.
arrow : ty -> ty -> ty.
tuple : ty -> ty -> ty.
nat : ty.
texpr : ty -> type.
z-t : texpr nat.
s-t : texpr nat -> texpr nat.
pair-t : {AT:ty} {BT:ty} texpr AT -> texpr BT -> texpr (tuple AT BT).
fst-t : {AT:ty} {BT:ty} texpr (tuple AT BT) -> texpr AT.
snd-t : {AT:ty} {BT:ty} texpr (tuple AT BT) -> texpr BT.
case-t :
   {BranchT:ty}
      texpr nat -> texpr BranchT -> (texpr nat -> texpr BranchT)
         -> texpr BranchT.
lam-t : {T1:ty} {T2:ty} (texpr T1 -> texpr T2) -> texpr (arrow T1 T2).
app-t : {T1:ty} {T2:ty} texpr (arrow T1 T2) -> texpr T1 -> texpr T2.
letv-t : {T1:ty} {T2:ty} texpr T1 -> (texpr T1 -> texpr T2) -> texpr T2.
letn-t : {T1:ty} {T2:ty} texpr T1 -> (texpr T1 -> texpr T2) -> texpr T2.
fix-t : {T:ty} (texpr T -> texpr T) -> texpr T.
teval : {A:ty} texpr A -> texpr A -> type.
teval-z : teval nat z-t z-t.
teval-s :
   {E:texpr nat} {V:texpr nat} teval nat E V -> teval nat (s-t E) (s-t V).
teval-pair :
   {AT:ty} {BT:ty} {A:texpr AT} {B:texpr BT} {A':texpr AT} {B':texpr BT}
      teval BT B B' -> teval AT A A'
         -> teval (tuple AT BT) (pair-t AT BT A B) (pair-t AT BT A' B').
teval-fst :
   {AT:ty} {BT:ty} {A:texpr AT} {B:texpr BT} {E:texpr (tuple AT BT)}
      teval (tuple AT BT) E (pair-t AT BT A B) -> teval AT (fst-t AT BT E) A.
teval-snd :
   {AT:ty} {BT:ty} {A:texpr AT} {B:texpr BT} {E:texpr (tuple AT BT)}
      teval (tuple AT BT) E (pair-t AT BT A B) -> teval BT (snd-t AT BT E) B.
teval-case-z :
   {Test:texpr nat} {BT:ty} {Tru:texpr BT}
      {Fls:texpr nat -> texpr BT} {V:texpr BT}
      teval BT Tru V -> teval nat Test z-t
         -> teval BT (case-t BT Test Tru ([x] Fls x)) V.
teval-case-s :
   {Test:texpr nat} {BranchT:ty} {Tru:texpr BranchT}
      {Fls:texpr nat -> texpr BranchT} {N:texpr nat} {V:texpr BranchT}
      teval BranchT (Fls N) V -> teval nat Test (s-t N)
         -> teval BranchT (case-t BranchT Test Tru ([x] Fls x)) V.
teval-lam :
   {T1:ty} {T2:ty} {E:texpr T1 -> texpr T2}
      teval (arrow T1 T2) (lam-t T1 T2 ([x] E x))
         (lam-t T1 T2 ([x] E x)).
teval-app :
   {T1:ty} {T2:ty} {A:texpr (arrow T1 T2)} {B:texpr T1} {F:texpr T1 -> texpr T2}
      {X:texpr T1} {V:texpr T2}
      teval T2 (F X) V -> teval T1 B X
         -> teval (arrow T1 T2) A (lam-t T1 T2 ([x] F x))
         -> teval T2 (app-t T1 T2 A B) V.
teval-letv :
   {T1:ty} {T2:ty} {E1:texpr T1} {E2:texpr T1 -> texpr T2} {V1:texpr T1}
      {V2:texpr T2}
      teval T2 (E2 V1) V2 -> teval T1 E1 V1
         -> teval T2 (letv-t T1 T2 E1 ([x] E2 x)) V2.
teval-letn :
   {T1:ty} {T2:ty} {E1:texpr T1} {E2:texpr T1 -> texpr T2} {V:texpr T2}
      teval T2 (E2 E1) V -> teval T2 (letn-t T1 T2 E1 ([x] E2 x)) V.
teval-fix :
   {T:ty} {E:texpr T -> texpr T} {V:texpr T}
      teval T (E (fix-t T ([x] E x))) V
         -> teval T (fix-t T ([x] E x)) V.

teq : {T:ty} texpr T -> texpr T -> type.
teq_refl : {T:ty}{E:texpr T} teq T E E.